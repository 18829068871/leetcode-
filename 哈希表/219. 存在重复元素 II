存在重复元素II

# 题目描述
给定一个整数数组和一个整数 k，判断数组中是否存在两个不同的索引 i 和 j，使得 nums [i] = nums [j]，并且 i 和 j 的差的 绝对值 至多为 k  
（也就是说如果数组存在两个相等的数，并且下标差的绝对值不超过k就输出True）。


## 示例1
```
输入: nums = [1,2,3,1], k = 3
输出: true
```

## 示例2
```
输入: nums = [1,2,3,1,2,3], k = 2
输出: false
```

## 方法一：暴力求解
将每个元素与它之前的 kk 个元素中比较查看它们是否相等。  
这个算法维护了一个 kk 大小的滑动窗口，然后在这个窗口里面搜索是否存在跟当前元素相等的元素。  
（该方法会超时）
## 代码

```java
public boolean containsNearbyDuplicate(int[] nums, int k) {
    for (int i = 0; i < nums.length; ++i) {
        for (int j = Math.max(i - k, 0); j < i; ++j) {
            if (nums[i] == nums[j]) return true;
        }
    }
    return false;
}
// Time Limit Exceeded.
```


## 方法二：使用哈希求解
用散列表来维护这个k大小的滑动窗口。  
遍历数组，对于每个元素做以下操作：
在散列表中搜索当前元素，如果找到了就返回 true。
在散列表中插入当前元素。
如果当前散列表的大小超过了 kk， 删除散列表中最旧的元素。
返回 false。

（要注意python用字典实现，无法删除最旧的元素，因此用字典保存下标，直接判断下标和差值）

## 代码

```python
class Solution:
    def containsNearbyDuplicate(self, nums: List[int], k: int) -> bool:
        dict={}
        for i in range(len(nums)):
            if nums[i] in dict and dict[nums[i]]>=i-k:
                return True
            dict[nums[i]] = i
        return False
```
